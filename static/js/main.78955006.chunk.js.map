{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","rows","autoFocus","backgroundColor","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","filter","element","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","about","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.78955006.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\n// If we use 'a' tag and href tag then page reload but if we use Link and to tag then page not reload\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n                  Home\r\n                </Link>\r\n              </li> */}\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">\r\n                  {props.about}\r\n                </Link>\r\n              </li> */}\r\n            </ul>\r\n            <div\r\n              className={`form-check form-switch text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n            >\r\n              <input\r\n                className=\"form-check-input\"\r\n                type=\"checkbox\"\r\n                id=\"flexSwitchCheckDefault\"\r\n                onClick={props.toggleMode}\r\n              />\r\n              <label\r\n                className=\"form-check-label\"\r\n                htmlFor=\"flexSwitchCheckDefault\"\r\n              >\r\n                Enable Dark Mode\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n\r\n//Taki user title mai string ke alawa kuch aur pass na krdw\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired, // isRequired only ensure krega ki title blank na rh jaye\r\n};\r\n\r\n//If kuch bhi pass nhi kiya to ye automatically pass ho jayega\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\",\r\n  about: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"On Change\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\", \"success\");\r\n  };\r\n\r\n  const handleLoClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    // console.log(\"Uppercase was clicked \" + text);\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text Cleared\", \"success\");\r\n  };\r\n\r\n  const handleCopyClick = () => {\r\n    // let text = document.getElementById(\"myBox\");\r\n    // text.select();\r\n    navigator.clipboard.writeText(text);\r\n    // document.getSelection().removeAllRanges();\r\n    props.showAlert(\"Copied to clipboard\", \"success\");\r\n  };\r\n\r\n  const handleExtraClick = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Removed extra spaces\", \"success\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"light\" ? \"#042743\" : \"white\" }}\r\n      >\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            rows=\"8\"\r\n            autoFocus\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#13466e\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleUpClick}\r\n        >\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleLoClick}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleCopyClick}\r\n        >\r\n          Copy Text\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleExtraClick}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-2\"\r\n        style={{ color: props.mode === \"light\" ? \"#042743\" : \"white\" }}\r\n      >\r\n        <h2>Your text summary</h2>\r\n        <p>\r\n          {\r\n            text.split(/\\s+/).filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>\r\n          {0.08 *\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{\" \"}\r\n          Minutes read\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Nothing to preview!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\n// import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Dark Mode\";\n\n      // setTimeout(() => {\n      //   document.title = \"Install TextUtils Now\";\n      // }, 2000);\n\n      // setTimeout(() => {\n      //   document.title = \"You have a Virus\";\n      // }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* users --> component 1\n        users/home --> component 2 */}\n\n        {/* <Switch> */}\n        {/* <Route exact path=\"/about\"> */}\n        {/* <About mode={mode} /> */}\n        {/* </Route> */}\n        {/* <Route exact path=\"/\"> */}\n        <TextForm\n          showAlert={showAlert}\n          heading=\"Try TextUtils - Word counter, Character counter, Remove extra spaces\"\n          mode={mode}\n        />\n        {/* </Route>\n          </Switch> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}